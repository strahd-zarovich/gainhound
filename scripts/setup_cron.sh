#!/usr/bin/env bash
# ==============================================================================
# File:        setup_cron.sh
# Purpose:     Create/refresh cron entries for Gainhound tasks.
# Author:      Gainhound Project
# ------------------------------------------------------------------------------
# Now also schedules:
#   â€¢ Daily log rotation via /scripts/log_rotate.sh (default 02:30).
# ==============================================================================

set -Eeo pipefail

LOG_TAG="CRON"
LOG_FILE="${LOG_FILE:-/data/logs/cron_setup.log}"
source /scripts/common.sh

CRON_FILE="/etc/cron.d/gainhound_jobs"

log INFO "Building cron file: ${CRON_FILE}"
load_config

# Existing vars
: "${GAINHOUND_CRON:=}"
: "${PLEX_CRON:=}"
: "${FORCE_PLEX_ANALYZE:=false}"
: "${RUN_GAIN_CHECK:=false}"
: "${RUN_INTEGRITY_CHECK:=false}"
: "${RUN_REENCODE_FOR_GAIN:=false}"

# New: log rotation schedule (default 02:30 daily)
: "${LOG_ROTATE_CRON:=30 2 * * *}"

# Decide if main Gainhound job should be scheduled
schedule_gainhound=false
if bool "${RUN_GAIN_CHECK}" || bool "${RUN_INTEGRITY_CHECK}" || bool "${RUN_REENCODE_FOR_GAIN}"; then
  schedule_gainhound=true
fi

# Header
{
  echo "SHELL=/bin/bash"
  echo "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  echo "# Gainhound scheduled jobs - autogenerated"
} > "${CRON_FILE}"

# Gainhound job
if ${schedule_gainhound} && [[ -n "${GAINHOUND_CRON}" ]]; then
  log INFO "Scheduling Gainhound with: \"${GAINHOUND_CRON}\""
  echo "${GAINHOUND_CRON} root /scripts/run_gainhound.sh >> /data/logs/cron_gainhound.log 2>&1" >> "${CRON_FILE}"
else
  if ! ${schedule_gainhound}; then
    log WARN "Skipping Gainhound schedule: all core features are disabled."
  elif [[ -z "${GAINHOUND_CRON}" ]]; then
    log WARN "Skipping Gainhound schedule: GAINHOUND_CRON is empty."
  fi
fi

# Plex job
if bool "${FORCE_PLEX_ANALYZE}" && [[ -n "${PLEX_CRON}" ]]; then
  log INFO "Scheduling Plex analyzer with: \"${PLEX_CRON}\""
  echo "${PLEX_CRON} root /scripts/plex_analyze.sh >> /data/logs/cron_plex.log 2>&1" >> "${CRON_FILE}"
else
  if ! bool "${FORCE_PLEX_ANALYZE}"; then
    log INFO "Skipping Plex schedule: FORCE_PLEX_ANALYZE is disabled."
  elif [[ -z "${PLEX_CRON}" ]]; then
    log WARN "Skipping Plex schedule: PLEX_CRON is empty."
  fi
fi

# Log rotation job (always scheduled, independent of feature toggles)
if [[ -n "${LOG_ROTATE_CRON}" ]]; then
  log INFO "Scheduling log rotation with: \"${LOG_ROTATE_CRON}\""
  echo "${LOG_ROTATE_CRON} root /scripts/log_rotate.sh >> /data/logs/cron_logrotate.log 2>&1" >> "${CRON_FILE}"
else
  log WARN "Skipping log rotation: LOG_ROTATE_CRON is empty."
fi

# Permissions for cron.d file
chmod 0644 "${CRON_FILE}"

# Final dump
log INFO "Final ${CRON_FILE} contents:"
while IFS= read -r line; do
  log INFO "  ${line}"
done < "${CRON_FILE}"
